// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: calc.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Calc_Add_FullMethodName            = "/calc.Calc/Add"
	Calc_Fibo_FullMethodName           = "/calc.Calc/Fibo"
	Calc_ComputeAverage_FullMethodName = "/calc.Calc/ComputeAverage"
	Calc_FindMaximum_FullMethodName    = "/calc.Calc/FindMaximum"
)

// CalcClient is the client API for Calc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalcClient interface {
	// Unary RPC method
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	// Server Streaming RPC method
	Fibo(ctx context.Context, in *FiboRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FiboResponse], error)
	// Client Streaming RPC method
	ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ComputeAverageRequest, ComputeAverageResponse], error)
	// Bidirectional Streaming RPC method
	FindMaximum(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FindMaximumRequest, FindMaximumResponse], error)
}

type calcClient struct {
	cc grpc.ClientConnInterface
}

func NewCalcClient(cc grpc.ClientConnInterface) CalcClient {
	return &calcClient{cc}
}

func (c *calcClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, Calc_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calcClient) Fibo(ctx context.Context, in *FiboRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FiboResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Calc_ServiceDesc.Streams[0], Calc_Fibo_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FiboRequest, FiboResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Calc_FiboClient = grpc.ServerStreamingClient[FiboResponse]

func (c *calcClient) ComputeAverage(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ComputeAverageRequest, ComputeAverageResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Calc_ServiceDesc.Streams[1], Calc_ComputeAverage_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ComputeAverageRequest, ComputeAverageResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Calc_ComputeAverageClient = grpc.ClientStreamingClient[ComputeAverageRequest, ComputeAverageResponse]

func (c *calcClient) FindMaximum(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[FindMaximumRequest, FindMaximumResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Calc_ServiceDesc.Streams[2], Calc_FindMaximum_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FindMaximumRequest, FindMaximumResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Calc_FindMaximumClient = grpc.BidiStreamingClient[FindMaximumRequest, FindMaximumResponse]

// CalcServer is the server API for Calc service.
// All implementations must embed UnimplementedCalcServer
// for forward compatibility.
type CalcServer interface {
	// Unary RPC method
	Add(context.Context, *AddRequest) (*AddResponse, error)
	// Server Streaming RPC method
	Fibo(*FiboRequest, grpc.ServerStreamingServer[FiboResponse]) error
	// Client Streaming RPC method
	ComputeAverage(grpc.ClientStreamingServer[ComputeAverageRequest, ComputeAverageResponse]) error
	// Bidirectional Streaming RPC method
	FindMaximum(grpc.BidiStreamingServer[FindMaximumRequest, FindMaximumResponse]) error
	mustEmbedUnimplementedCalcServer()
}

// UnimplementedCalcServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCalcServer struct{}

func (UnimplementedCalcServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCalcServer) Fibo(*FiboRequest, grpc.ServerStreamingServer[FiboResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Fibo not implemented")
}
func (UnimplementedCalcServer) ComputeAverage(grpc.ClientStreamingServer[ComputeAverageRequest, ComputeAverageResponse]) error {
	return status.Errorf(codes.Unimplemented, "method ComputeAverage not implemented")
}
func (UnimplementedCalcServer) FindMaximum(grpc.BidiStreamingServer[FindMaximumRequest, FindMaximumResponse]) error {
	return status.Errorf(codes.Unimplemented, "method FindMaximum not implemented")
}
func (UnimplementedCalcServer) mustEmbedUnimplementedCalcServer() {}
func (UnimplementedCalcServer) testEmbeddedByValue()              {}

// UnsafeCalcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalcServer will
// result in compilation errors.
type UnsafeCalcServer interface {
	mustEmbedUnimplementedCalcServer()
}

func RegisterCalcServer(s grpc.ServiceRegistrar, srv CalcServer) {
	// If the following call pancis, it indicates UnimplementedCalcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Calc_ServiceDesc, srv)
}

func _Calc_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalcServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calc_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalcServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calc_Fibo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FiboRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalcServer).Fibo(m, &grpc.GenericServerStream[FiboRequest, FiboResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Calc_FiboServer = grpc.ServerStreamingServer[FiboResponse]

func _Calc_ComputeAverage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalcServer).ComputeAverage(&grpc.GenericServerStream[ComputeAverageRequest, ComputeAverageResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Calc_ComputeAverageServer = grpc.ClientStreamingServer[ComputeAverageRequest, ComputeAverageResponse]

func _Calc_FindMaximum_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalcServer).FindMaximum(&grpc.GenericServerStream[FindMaximumRequest, FindMaximumResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Calc_FindMaximumServer = grpc.BidiStreamingServer[FindMaximumRequest, FindMaximumResponse]

// Calc_ServiceDesc is the grpc.ServiceDesc for Calc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calc.Calc",
	HandlerType: (*CalcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Calc_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fibo",
			Handler:       _Calc_Fibo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ComputeAverage",
			Handler:       _Calc_ComputeAverage_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "FindMaximum",
			Handler:       _Calc_FindMaximum_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calc.proto",
}
