//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: calc.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Calc_CalcClient`, then call methods of this protocol to make API calls.
internal protocol Calc_CalcClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Calc_CalcClientInterceptorFactoryProtocol? { get }

  func add(
    _ request: Calc_AddRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Calc_AddRequest, Calc_AddResponse>

  func fibo(
    _ request: Calc_FiboRequest,
    callOptions: CallOptions?,
    handler: @escaping (Calc_FiboResponse) -> Void
  ) -> ServerStreamingCall<Calc_FiboRequest, Calc_FiboResponse>

  func computeAverage(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Calc_ComputeAverageRequest, Calc_ComputeAverageResponse>

  func findMaximum(
    callOptions: CallOptions?,
    handler: @escaping (Calc_FindMaximumResponse) -> Void
  ) -> BidirectionalStreamingCall<Calc_FindMaximumRequest, Calc_FindMaximumResponse>
}

extension Calc_CalcClientProtocol {
  internal var serviceName: String {
    return "calc.Calc"
  }

  /// Unary RPC method
  ///
  /// - Parameters:
  ///   - request: Request to send to Add.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func add(
    _ request: Calc_AddRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Calc_AddRequest, Calc_AddResponse> {
    return self.makeUnaryCall(
      path: Calc_CalcClientMetadata.Methods.add.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddInterceptors() ?? []
    )
  }

  /// Server Streaming RPC method
  ///
  /// - Parameters:
  ///   - request: Request to send to Fibo.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func fibo(
    _ request: Calc_FiboRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Calc_FiboResponse) -> Void
  ) -> ServerStreamingCall<Calc_FiboRequest, Calc_FiboResponse> {
    return self.makeServerStreamingCall(
      path: Calc_CalcClientMetadata.Methods.fibo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFiboInterceptors() ?? [],
      handler: handler
    )
  }

  /// Client Streaming RPC method
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func computeAverage(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Calc_ComputeAverageRequest, Calc_ComputeAverageResponse> {
    return self.makeClientStreamingCall(
      path: Calc_CalcClientMetadata.Methods.computeAverage.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComputeAverageInterceptors() ?? []
    )
  }

  /// Bidirectional Streaming RPC method
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func findMaximum(
    callOptions: CallOptions? = nil,
    handler: @escaping (Calc_FindMaximumResponse) -> Void
  ) -> BidirectionalStreamingCall<Calc_FindMaximumRequest, Calc_FindMaximumResponse> {
    return self.makeBidirectionalStreamingCall(
      path: Calc_CalcClientMetadata.Methods.findMaximum.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFindMaximumInterceptors() ?? [],
      handler: handler
    )
  }
}

@available(*, deprecated)
extension Calc_CalcClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Calc_CalcNIOClient")
internal final class Calc_CalcClient: Calc_CalcClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Calc_CalcClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Calc_CalcClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the calc.Calc service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Calc_CalcClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Calc_CalcNIOClient: Calc_CalcClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Calc_CalcClientInterceptorFactoryProtocol?

  /// Creates a client for the calc.Calc service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Calc_CalcClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Calc_CalcAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Calc_CalcClientInterceptorFactoryProtocol? { get }

  func makeAddCall(
    _ request: Calc_AddRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Calc_AddRequest, Calc_AddResponse>

  func makeFiboCall(
    _ request: Calc_FiboRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Calc_FiboRequest, Calc_FiboResponse>

  func makeComputeAverageCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Calc_ComputeAverageRequest, Calc_ComputeAverageResponse>

  func makeFindMaximumCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Calc_FindMaximumRequest, Calc_FindMaximumResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Calc_CalcAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Calc_CalcClientMetadata.serviceDescriptor
  }

  internal var interceptors: Calc_CalcClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeAddCall(
    _ request: Calc_AddRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Calc_AddRequest, Calc_AddResponse> {
    return self.makeAsyncUnaryCall(
      path: Calc_CalcClientMetadata.Methods.add.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddInterceptors() ?? []
    )
  }

  internal func makeFiboCall(
    _ request: Calc_FiboRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Calc_FiboRequest, Calc_FiboResponse> {
    return self.makeAsyncServerStreamingCall(
      path: Calc_CalcClientMetadata.Methods.fibo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFiboInterceptors() ?? []
    )
  }

  internal func makeComputeAverageCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Calc_ComputeAverageRequest, Calc_ComputeAverageResponse> {
    return self.makeAsyncClientStreamingCall(
      path: Calc_CalcClientMetadata.Methods.computeAverage.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComputeAverageInterceptors() ?? []
    )
  }

  internal func makeFindMaximumCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Calc_FindMaximumRequest, Calc_FindMaximumResponse> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Calc_CalcClientMetadata.Methods.findMaximum.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFindMaximumInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Calc_CalcAsyncClientProtocol {
  internal func add(
    _ request: Calc_AddRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Calc_AddResponse {
    return try await self.performAsyncUnaryCall(
      path: Calc_CalcClientMetadata.Methods.add.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddInterceptors() ?? []
    )
  }

  internal func fibo(
    _ request: Calc_FiboRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Calc_FiboResponse> {
    return self.performAsyncServerStreamingCall(
      path: Calc_CalcClientMetadata.Methods.fibo.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFiboInterceptors() ?? []
    )
  }

  internal func computeAverage<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Calc_ComputeAverageResponse where RequestStream: Sequence, RequestStream.Element == Calc_ComputeAverageRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Calc_CalcClientMetadata.Methods.computeAverage.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComputeAverageInterceptors() ?? []
    )
  }

  internal func computeAverage<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Calc_ComputeAverageResponse where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Calc_ComputeAverageRequest {
    return try await self.performAsyncClientStreamingCall(
      path: Calc_CalcClientMetadata.Methods.computeAverage.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeComputeAverageInterceptors() ?? []
    )
  }

  internal func findMaximum<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Calc_FindMaximumResponse> where RequestStream: Sequence, RequestStream.Element == Calc_FindMaximumRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Calc_CalcClientMetadata.Methods.findMaximum.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFindMaximumInterceptors() ?? []
    )
  }

  internal func findMaximum<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Calc_FindMaximumResponse> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Calc_FindMaximumRequest {
    return self.performAsyncBidirectionalStreamingCall(
      path: Calc_CalcClientMetadata.Methods.findMaximum.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFindMaximumInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Calc_CalcAsyncClient: Calc_CalcAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Calc_CalcClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Calc_CalcClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Calc_CalcClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'add'.
  func makeAddInterceptors() -> [ClientInterceptor<Calc_AddRequest, Calc_AddResponse>]

  /// - Returns: Interceptors to use when invoking 'fibo'.
  func makeFiboInterceptors() -> [ClientInterceptor<Calc_FiboRequest, Calc_FiboResponse>]

  /// - Returns: Interceptors to use when invoking 'computeAverage'.
  func makeComputeAverageInterceptors() -> [ClientInterceptor<Calc_ComputeAverageRequest, Calc_ComputeAverageResponse>]

  /// - Returns: Interceptors to use when invoking 'findMaximum'.
  func makeFindMaximumInterceptors() -> [ClientInterceptor<Calc_FindMaximumRequest, Calc_FindMaximumResponse>]
}

internal enum Calc_CalcClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Calc",
    fullName: "calc.Calc",
    methods: [
      Calc_CalcClientMetadata.Methods.add,
      Calc_CalcClientMetadata.Methods.fibo,
      Calc_CalcClientMetadata.Methods.computeAverage,
      Calc_CalcClientMetadata.Methods.findMaximum,
    ]
  )

  internal enum Methods {
    internal static let add = GRPCMethodDescriptor(
      name: "Add",
      path: "/calc.Calc/Add",
      type: GRPCCallType.unary
    )

    internal static let fibo = GRPCMethodDescriptor(
      name: "Fibo",
      path: "/calc.Calc/Fibo",
      type: GRPCCallType.serverStreaming
    )

    internal static let computeAverage = GRPCMethodDescriptor(
      name: "ComputeAverage",
      path: "/calc.Calc/ComputeAverage",
      type: GRPCCallType.clientStreaming
    )

    internal static let findMaximum = GRPCMethodDescriptor(
      name: "FindMaximum",
      path: "/calc.Calc/FindMaximum",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Calc_CalcProvider: CallHandlerProvider {
  var interceptors: Calc_CalcServerInterceptorFactoryProtocol? { get }

  /// Unary RPC method
  func add(request: Calc_AddRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Calc_AddResponse>

  /// Server Streaming RPC method
  func fibo(request: Calc_FiboRequest, context: StreamingResponseCallContext<Calc_FiboResponse>) -> EventLoopFuture<GRPCStatus>

  /// Client Streaming RPC method
  func computeAverage(context: UnaryResponseCallContext<Calc_ComputeAverageResponse>) -> EventLoopFuture<(StreamEvent<Calc_ComputeAverageRequest>) -> Void>

  /// Bidirectional Streaming RPC method
  func findMaximum(context: StreamingResponseCallContext<Calc_FindMaximumResponse>) -> EventLoopFuture<(StreamEvent<Calc_FindMaximumRequest>) -> Void>
}

extension Calc_CalcProvider {
  internal var serviceName: Substring {
    return Calc_CalcServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Add":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Calc_AddRequest>(),
        responseSerializer: ProtobufSerializer<Calc_AddResponse>(),
        interceptors: self.interceptors?.makeAddInterceptors() ?? [],
        userFunction: self.add(request:context:)
      )

    case "Fibo":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Calc_FiboRequest>(),
        responseSerializer: ProtobufSerializer<Calc_FiboResponse>(),
        interceptors: self.interceptors?.makeFiboInterceptors() ?? [],
        userFunction: self.fibo(request:context:)
      )

    case "ComputeAverage":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Calc_ComputeAverageRequest>(),
        responseSerializer: ProtobufSerializer<Calc_ComputeAverageResponse>(),
        interceptors: self.interceptors?.makeComputeAverageInterceptors() ?? [],
        observerFactory: self.computeAverage(context:)
      )

    case "FindMaximum":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Calc_FindMaximumRequest>(),
        responseSerializer: ProtobufSerializer<Calc_FindMaximumResponse>(),
        interceptors: self.interceptors?.makeFindMaximumInterceptors() ?? [],
        observerFactory: self.findMaximum(context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Calc_CalcAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Calc_CalcServerInterceptorFactoryProtocol? { get }

  /// Unary RPC method
  func add(
    request: Calc_AddRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Calc_AddResponse

  /// Server Streaming RPC method
  func fibo(
    request: Calc_FiboRequest,
    responseStream: GRPCAsyncResponseStreamWriter<Calc_FiboResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws

  /// Client Streaming RPC method
  func computeAverage(
    requestStream: GRPCAsyncRequestStream<Calc_ComputeAverageRequest>,
    context: GRPCAsyncServerCallContext
  ) async throws -> Calc_ComputeAverageResponse

  /// Bidirectional Streaming RPC method
  func findMaximum(
    requestStream: GRPCAsyncRequestStream<Calc_FindMaximumRequest>,
    responseStream: GRPCAsyncResponseStreamWriter<Calc_FindMaximumResponse>,
    context: GRPCAsyncServerCallContext
  ) async throws
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Calc_CalcAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Calc_CalcServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Calc_CalcServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Calc_CalcServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Add":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Calc_AddRequest>(),
        responseSerializer: ProtobufSerializer<Calc_AddResponse>(),
        interceptors: self.interceptors?.makeAddInterceptors() ?? [],
        wrapping: { try await self.add(request: $0, context: $1) }
      )

    case "Fibo":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Calc_FiboRequest>(),
        responseSerializer: ProtobufSerializer<Calc_FiboResponse>(),
        interceptors: self.interceptors?.makeFiboInterceptors() ?? [],
        wrapping: { try await self.fibo(request: $0, responseStream: $1, context: $2) }
      )

    case "ComputeAverage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Calc_ComputeAverageRequest>(),
        responseSerializer: ProtobufSerializer<Calc_ComputeAverageResponse>(),
        interceptors: self.interceptors?.makeComputeAverageInterceptors() ?? [],
        wrapping: { try await self.computeAverage(requestStream: $0, context: $1) }
      )

    case "FindMaximum":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Calc_FindMaximumRequest>(),
        responseSerializer: ProtobufSerializer<Calc_FindMaximumResponse>(),
        interceptors: self.interceptors?.makeFindMaximumInterceptors() ?? [],
        wrapping: { try await self.findMaximum(requestStream: $0, responseStream: $1, context: $2) }
      )

    default:
      return nil
    }
  }
}

internal protocol Calc_CalcServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'add'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddInterceptors() -> [ServerInterceptor<Calc_AddRequest, Calc_AddResponse>]

  /// - Returns: Interceptors to use when handling 'fibo'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFiboInterceptors() -> [ServerInterceptor<Calc_FiboRequest, Calc_FiboResponse>]

  /// - Returns: Interceptors to use when handling 'computeAverage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeComputeAverageInterceptors() -> [ServerInterceptor<Calc_ComputeAverageRequest, Calc_ComputeAverageResponse>]

  /// - Returns: Interceptors to use when handling 'findMaximum'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFindMaximumInterceptors() -> [ServerInterceptor<Calc_FindMaximumRequest, Calc_FindMaximumResponse>]
}

internal enum Calc_CalcServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Calc",
    fullName: "calc.Calc",
    methods: [
      Calc_CalcServerMetadata.Methods.add,
      Calc_CalcServerMetadata.Methods.fibo,
      Calc_CalcServerMetadata.Methods.computeAverage,
      Calc_CalcServerMetadata.Methods.findMaximum,
    ]
  )

  internal enum Methods {
    internal static let add = GRPCMethodDescriptor(
      name: "Add",
      path: "/calc.Calc/Add",
      type: GRPCCallType.unary
    )

    internal static let fibo = GRPCMethodDescriptor(
      name: "Fibo",
      path: "/calc.Calc/Fibo",
      type: GRPCCallType.serverStreaming
    )

    internal static let computeAverage = GRPCMethodDescriptor(
      name: "ComputeAverage",
      path: "/calc.Calc/ComputeAverage",
      type: GRPCCallType.clientStreaming
    )

    internal static let findMaximum = GRPCMethodDescriptor(
      name: "FindMaximum",
      path: "/calc.Calc/FindMaximum",
      type: GRPCCallType.bidirectionalStreaming
    )
  }
}
