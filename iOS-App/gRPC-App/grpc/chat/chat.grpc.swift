//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: chat.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Chat_BroadcastClient`, then call methods of this protocol to make API calls.
internal protocol Chat_BroadcastClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Chat_BroadcastClientInterceptorFactoryProtocol? { get }

  func createStream(
    _ request: Chat_Connect,
    callOptions: CallOptions?,
    handler: @escaping (Chat_Message) -> Void
  ) -> ServerStreamingCall<Chat_Connect, Chat_Message>

  func broadcastMessage(
    _ request: Chat_Message,
    callOptions: CallOptions?
  ) -> UnaryCall<Chat_Message, Chat_Close>
}

extension Chat_BroadcastClientProtocol {
  internal var serviceName: String {
    return "chat.Broadcast"
  }

  /// Server streaming call to CreateStream
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateStream.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func createStream(
    _ request: Chat_Connect,
    callOptions: CallOptions? = nil,
    handler: @escaping (Chat_Message) -> Void
  ) -> ServerStreamingCall<Chat_Connect, Chat_Message> {
    return self.makeServerStreamingCall(
      path: Chat_BroadcastClientMetadata.Methods.createStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateStreamInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to BroadcastMessage
  ///
  /// - Parameters:
  ///   - request: Request to send to BroadcastMessage.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func broadcastMessage(
    _ request: Chat_Message,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Chat_Message, Chat_Close> {
    return self.makeUnaryCall(
      path: Chat_BroadcastClientMetadata.Methods.broadcastMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBroadcastMessageInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Chat_BroadcastClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Chat_BroadcastNIOClient")
internal final class Chat_BroadcastClient: Chat_BroadcastClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Chat_BroadcastClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Chat_BroadcastClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the chat.Broadcast service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Chat_BroadcastClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Chat_BroadcastNIOClient: Chat_BroadcastClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Chat_BroadcastClientInterceptorFactoryProtocol?

  /// Creates a client for the chat.Broadcast service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Chat_BroadcastClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Chat_BroadcastAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Chat_BroadcastClientInterceptorFactoryProtocol? { get }

  func makeCreateStreamCall(
    _ request: Chat_Connect,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<Chat_Connect, Chat_Message>

  func makeBroadcastMessageCall(
    _ request: Chat_Message,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Chat_Message, Chat_Close>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Chat_BroadcastAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Chat_BroadcastClientMetadata.serviceDescriptor
  }

  internal var interceptors: Chat_BroadcastClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateStreamCall(
    _ request: Chat_Connect,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<Chat_Connect, Chat_Message> {
    return self.makeAsyncServerStreamingCall(
      path: Chat_BroadcastClientMetadata.Methods.createStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateStreamInterceptors() ?? []
    )
  }

  internal func makeBroadcastMessageCall(
    _ request: Chat_Message,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Chat_Message, Chat_Close> {
    return self.makeAsyncUnaryCall(
      path: Chat_BroadcastClientMetadata.Methods.broadcastMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBroadcastMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Chat_BroadcastAsyncClientProtocol {
  internal func createStream(
    _ request: Chat_Connect,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Chat_Message> {
    return self.performAsyncServerStreamingCall(
      path: Chat_BroadcastClientMetadata.Methods.createStream.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateStreamInterceptors() ?? []
    )
  }

  internal func broadcastMessage(
    _ request: Chat_Message,
    callOptions: CallOptions? = nil
  ) async throws -> Chat_Close {
    return try await self.performAsyncUnaryCall(
      path: Chat_BroadcastClientMetadata.Methods.broadcastMessage.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeBroadcastMessageInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Chat_BroadcastAsyncClient: Chat_BroadcastAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Chat_BroadcastClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Chat_BroadcastClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Chat_BroadcastClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createStream'.
  func makeCreateStreamInterceptors() -> [ClientInterceptor<Chat_Connect, Chat_Message>]

  /// - Returns: Interceptors to use when invoking 'broadcastMessage'.
  func makeBroadcastMessageInterceptors() -> [ClientInterceptor<Chat_Message, Chat_Close>]
}

internal enum Chat_BroadcastClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Broadcast",
    fullName: "chat.Broadcast",
    methods: [
      Chat_BroadcastClientMetadata.Methods.createStream,
      Chat_BroadcastClientMetadata.Methods.broadcastMessage,
    ]
  )

  internal enum Methods {
    internal static let createStream = GRPCMethodDescriptor(
      name: "CreateStream",
      path: "/chat.Broadcast/CreateStream",
      type: GRPCCallType.serverStreaming
    )

    internal static let broadcastMessage = GRPCMethodDescriptor(
      name: "BroadcastMessage",
      path: "/chat.Broadcast/BroadcastMessage",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Chat_BroadcastProvider: CallHandlerProvider {
  var interceptors: Chat_BroadcastServerInterceptorFactoryProtocol? { get }

  func createStream(request: Chat_Connect, context: StreamingResponseCallContext<Chat_Message>) -> EventLoopFuture<GRPCStatus>

  func broadcastMessage(request: Chat_Message, context: StatusOnlyCallContext) -> EventLoopFuture<Chat_Close>
}

extension Chat_BroadcastProvider {
  internal var serviceName: Substring {
    return Chat_BroadcastServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateStream":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Chat_Connect>(),
        responseSerializer: ProtobufSerializer<Chat_Message>(),
        interceptors: self.interceptors?.makeCreateStreamInterceptors() ?? [],
        userFunction: self.createStream(request:context:)
      )

    case "BroadcastMessage":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Chat_Message>(),
        responseSerializer: ProtobufSerializer<Chat_Close>(),
        interceptors: self.interceptors?.makeBroadcastMessageInterceptors() ?? [],
        userFunction: self.broadcastMessage(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Chat_BroadcastAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Chat_BroadcastServerInterceptorFactoryProtocol? { get }

  func createStream(
    request: Chat_Connect,
    responseStream: GRPCAsyncResponseStreamWriter<Chat_Message>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func broadcastMessage(
    request: Chat_Message,
    context: GRPCAsyncServerCallContext
  ) async throws -> Chat_Close
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Chat_BroadcastAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Chat_BroadcastServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Chat_BroadcastServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Chat_BroadcastServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateStream":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Chat_Connect>(),
        responseSerializer: ProtobufSerializer<Chat_Message>(),
        interceptors: self.interceptors?.makeCreateStreamInterceptors() ?? [],
        wrapping: { try await self.createStream(request: $0, responseStream: $1, context: $2) }
      )

    case "BroadcastMessage":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Chat_Message>(),
        responseSerializer: ProtobufSerializer<Chat_Close>(),
        interceptors: self.interceptors?.makeBroadcastMessageInterceptors() ?? [],
        wrapping: { try await self.broadcastMessage(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Chat_BroadcastServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'createStream'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateStreamInterceptors() -> [ServerInterceptor<Chat_Connect, Chat_Message>]

  /// - Returns: Interceptors to use when handling 'broadcastMessage'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeBroadcastMessageInterceptors() -> [ServerInterceptor<Chat_Message, Chat_Close>]
}

internal enum Chat_BroadcastServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Broadcast",
    fullName: "chat.Broadcast",
    methods: [
      Chat_BroadcastServerMetadata.Methods.createStream,
      Chat_BroadcastServerMetadata.Methods.broadcastMessage,
    ]
  )

  internal enum Methods {
    internal static let createStream = GRPCMethodDescriptor(
      name: "CreateStream",
      path: "/chat.Broadcast/CreateStream",
      type: GRPCCallType.serverStreaming
    )

    internal static let broadcastMessage = GRPCMethodDescriptor(
      name: "BroadcastMessage",
      path: "/chat.Broadcast/BroadcastMessage",
      type: GRPCCallType.unary
    )
  }
}
